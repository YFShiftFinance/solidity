Optimized IR:
/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/

object "Arraysum_33" {
    code {
        {
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            let _1 := datasize("Arraysum_33_deployed")
            codecopy(0, dataoffset("Arraysum_33_deployed"), _1)
            return(0, _1)
        }
    }
    object "Arraysum_33_deployed" {
        code {
            {
                mstore(64, 128)
                let _1 := 4
                if iszero(lt(calldatasize(), _1))
                {
                    let _2 := 0
                    if eq(0x81d73423, shr(224, calldataload(_2)))
                    {
                        if callvalue() { revert(_2, _2) }
                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }
                        let vloc_sum := _2
                        let vloc_i := _2
                        let _3 := sload(_2)
                        for { }
                        lt(vloc_i, _3)
                        {
                            if gt(vloc_i, not(1)) { revert(_2, _2) }
                            vloc_i := add(vloc_i, 1)
                        }
                        {
                            mstore(_2, _2)
                            let _4 := sload(add(keccak256(_2, 0x20), vloc_i))
                            if gt(vloc_sum, not(_4))
                            {
                                mstore(_2, shl(225, 0x0fc12e35))
                                revert(_2, _1)
                            }
                            vloc_sum := add(vloc_sum, _4)
                        }
                        let memPos := allocateMemory(_2)
                        return(memPos, sub(abi_encode_uint(memPos, _2), memPos))
                    }
                }
                revert(0, 0)
            }
            function abi_encode_uint(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, value0)
            }
            function allocateMemory(size) -> memPtr
            {
                memPtr := mload(64)
                let newFreePtr := add(memPtr, size)
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { revert(0, 0) }
                mstore(64, newFreePtr)
            }
        }
    }
}
